import numpy
import scipy.special
import matplotlib.pyplot
%matplotlib inline
# neural network class definition
class neuralNetwork:
    # initialise the nerual nerwork
    def __init__(self, inputnodes, hiddennodes, outputnodes, learingrate) :
        # set number of nodes in each input , hidden, output layer
        self.inodes = inputnodes
        self.hnodes = hiddennodes
        self.onodes = outputnodes
        #learning rate
        self.lr = learingrate
        # link weight matrices, wih and who
        # weights inside the arrays are w_i_j, where link is from node i to node j in the next layer
        # 正态分布权重，第一个为方差，第二个为输入变量的-0.5次方即根号分之一，最后一个为矩阵的行、列
        self.wih = numpy.random.normal(0.0, pow(self.hnodes, -0.5), (self.hnodes, self.inodes)) 
        self.who = numpy.random.normal(0.0, pow(self.inodes, -0.5), (self.onodes, self.hnodes)) 
        #activation function is the sigmoid function
        self.activation_function = lambda x: scipy.special.expit(x)
        pass
    # train the neural networkp
    def train(self, inputs_list, targets_list) :
        #convert inputs list to 2d array
        inputs = numpy.array(inputs_list, ndmin=2).T
        targets = numpy.array(targets_list, ndmin=2).T
        #calculate signals into hidden layer
        hidden_inputs = numpy.dot(self.wih, inputs)
        #calculate signals emerging from hidden layer
        hidden_outputs = self.activation_function(hidden_inputs)
        #calculate signals into final output layer
        final_inputs = numpy.dot(self.who, hidden_outputs)
        #calculate the signals emerging from final output layer
        final_outputs = self.activation_function(final_inputs)
        
        #error is the (target - actual)
        output_errors = targets - final_outputs
        #hidden layer error is the output_errors, split by weights, recombined at hidden nodes
        hidden_errors = numpy.dot(self.who.T, output_errors)
        
        #update the weight for the links between the hidden and output layers
        self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)), numpy.transpose(hidden_outputs) )
        #update the weight for the links between the input and hidden layers
        self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs) )
        pass
    # query the neural network
    def query(self, input_list) :
        #convert inputs list to 2d array
        inputs = numpy.array(input_list, ndmin=2).T
        #calculate signals into hidden layer
        hidden_inputs = numpy.dot(self.wih, inputs)
        #calculate signals emerging from hidden layer
        hidden_outputs = self.activation_function(hidden_inputs)
        #calculate signals into final output layer
        final_inputs = numpy.dot(self.who, hidden_outputs)
        #calculate the signals emerging from final output layer
        final_outputs = self.activation_function(final_inputs)
        return final_outputs
    
#number of input, hidden and output nodes
input_nodes=784
hidden_nodes=100
output_nodes=10
    
#learning rate
learning_rate=0.1
    
#create instance of neural network
n = neuralNetwork(input_nodes,hidden_nodes,output_nodes,learning_rate)
    
#load the mnist training data csv file into a list
training_data_file = open("mnist_dataset/mnist_train.csv",'r')
training_data_list = training_data_file.readlines()
training_data_file.close()
    
#train the neural network

#epochs is the number of times the training data set is used for training
epochs = 6

for e in range(epochs):
    #go through all records inthe training data set
    for record in training_data_list:
        #split the record by the ',' commas
        all_values = record.split(',')
        #scale and shift the inputs
        inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
        #create the target output values (all 0.01, except the desired label which is o.99)
        targets = numpy.zeros(output_nodes) + 0.01
        #all_values[0] is the target label for the record
        targets[int(all_values[0])]=0.99
        n.train(inputs,targets)
        pass
    pass


#test the neural net work
#load the mnist test data CSV file into a list
test_data_file = open("mnist_dataset/mnist_test.csv",'r')
test_data_list = test_data_file.readlines()
test_data_file.close()
#scorecard for how well the network performs, initially empty
scorecard = []
#go through all records inthe test data set
for record in test_data_list:
    #split the record by the ',' commas
    all_values = record.split(',')
    #correct answer is first value
    correct_label = int(all_values[0])
    print(correct_label,"correct label")
    #scale and shift the inputs
    inputs = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
    #query the network
    outputs = n.query(inputs)
    #the index of the heighest value corresponds to the label
    label = numpy.argmax(outputs)
    print(label,"network is answer")
    #append correct or incorrect to list
    if (label == correct_label):
        #network's answer mathces correct answer, add 1 to scorecard
        scorecard.append(1)
    else:
        scorecard.append(0)    
        pass
    pass
#calculate the performance score, the fraction of correct answers
scorecard_array = numpy.asarray(scorecard)
print("performance = ", scorecard_array.sum() / scorecard_array.size)
